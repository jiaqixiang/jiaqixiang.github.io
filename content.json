{"meta":{"title":"贾琦翔的博客","subtitle":"","description":"","author":"Jia qixiang","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"RSA加密","slug":"rsa","date":"2019-05-03T11:04:41.000Z","updated":"2019-12-30T11:38:25.959Z","comments":true,"path":"2019/05/03/rsa/","link":"","permalink":"http://yoursite.com/2019/05/03/rsa/","excerpt":"","text":"vue相关的rsa加密,项目需求,留作回顾. vue组件引入1import &#123; JSEncrypt &#125; from 'jsencrypt'; 方法内使用12345let publicKey = asdfsafdadfafasjdhfasfd // 从后台获取公钥，这里省略，直接赋值let encryptor = new JSEncrypt() // 新建JSEncrypt对象encryptor.setPublicKey(publicKey) // 设置公钥let rsaPassWord = encryptor.encrypt(password) // 对密码进行加密","categories":[],"tags":[]},{"title":"element翻页记忆","slug":"fenye","date":"2019-04-05T12:04:02.000Z","updated":"2019-12-30T10:21:53.575Z","comments":true,"path":"2019/04/05/fenye/","link":"","permalink":"http://yoursite.com/2019/04/05/fenye/","excerpt":"","text":"记忆翻页新需求，留作回顾。记录当前选中的分页中的列表，分页保存数据，然后在用选中的数据进行某些操作. 效果展示 HTML123456789101112131415161718&lt;!--table组件需要使用ref=\"table\"--&gt;&lt;template&gt; &lt;div&gt; &lt;el-table :data=\"tableData\" ref=\"table\" stripe style=\"width: 100%\" @selection-change=\"handleSelectionChange\"&gt; &lt;el-table-column type=\"selection\" width=\"55\"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=\"name\" label=\"商品名称\"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=\"barcode\" label=\"商品编码\"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=\"quantity\" label=\"区域总库存\"&gt;&lt;/el-table-column&gt; &lt;/el-table&gt; &lt;div class=\"block\" v-show=\"page.pageTotal&gt;10\"&gt; &lt;el-pagination @current-change=\"handleCurrentChange\" :current-page.sync=\"page.currentPage\" :page-size=\"page.pnum\" layout=\"total, prev, pager, next , jumper\" :total=\"page.pageTotal\"&gt; &lt;/el-pagination&gt; &lt;/div&gt; &lt;div&gt; &#123;&#123;multipleSelectionAll.length&#125;&#125; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; JS123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116export default &#123; data()&#123; return &#123; tableData: [], // 表格数据 multipleSelectionAll:[],//所有选中的数据包含跨页数据 multipleSelection:[],// 当前页选中的数据 idKey: 'barcode', // 标识列表数据中每一行的唯一键的名称 page:&#123; //每页数据量 pnum:10, //数据总数 pageTotal:0, //当前页，从1开始 currentPage:1, &#125; &#125; &#125;, methods: &#123; handleCurrentChange()&#123; this.changePageCoreRecordData(); if(!this.$isNull(this.page.pageTotal)) this.getGoodsList(); &#125;, handleSelectionChange (val) &#123; this.multipleSelection = val; //实时记录选中的数据 setTimeout(()=&gt;&#123; this.changePageCoreRecordData(); &#125;, 50) &#125;, setSelectRow() &#123; if (!this.multipleSelectionAll || this.multipleSelectionAll.length &lt;= 0) &#123; return; &#125; // 标识当前行的唯一键的名称 let idKey = this.idKey; let selectAllIds = []; let that = this; this.multipleSelectionAll.forEach(row=&gt;&#123; selectAllIds.push(row[idKey]); &#125;) this.$refs.table.clearSelection(); for(var i = 0; i &lt; this.tableData.length; i++) &#123; if (selectAllIds.indexOf(this.tableData[i][idKey]) &gt;= 0) &#123; // 设置选中，记住table组件需要使用ref=\"table\" this.$refs.table.toggleRowSelection(this.tableData[i], true); &#125; &#125; &#125;, // 记忆选择核心方法 changePageCoreRecordData () &#123; // 标识当前行的唯一键的名称 let idKey = this.idKey; let that = this; // 如果总记忆中还没有选择的数据，那么就直接取当前页选中的数据，不需要后面一系列计算 if (this.multipleSelectionAll.length &lt;= 0) &#123; this.multipleSelectionAll = this.multipleSelection; return; &#125; // 总选择里面的key集合 let selectAllIds = []; this.multipleSelectionAll.forEach(row=&gt;&#123; selectAllIds.push(row[idKey]); &#125;) let selectIds = [] // 获取当前页选中的id this.multipleSelection.forEach(row=&gt;&#123; selectIds.push(row[idKey]); // 如果总选择里面不包含当前页选中的数据，那么就加入到总选择集合里 if (selectAllIds.indexOf(row[idKey]) &lt; 0) &#123; that.multipleSelectionAll.push(row); &#125; &#125;) let noSelectIds = []; // 得到当前页没有选中的id this.tableData.forEach(row=&gt;&#123; if (selectIds.indexOf(row[idKey]) &lt; 0) &#123; noSelectIds.push(row[idKey]); &#125; &#125;) noSelectIds.forEach(id=&gt;&#123; if (selectAllIds.indexOf(id) &gt;= 0) &#123; for(let i = 0; i&lt; that.multipleSelectionAll.length; i ++) &#123; if (that.multipleSelectionAll[i][idKey] == id) &#123; // 如果总选择中有未被选中的，那么就删除这条 that.multipleSelectionAll.splice(i, 1); break; &#125; &#125; &#125; &#125;) &#125;, //请求接口部分 getGoodsList()&#123; let data = &#123;&#125;; data['page'] = this.page.currentPage; data['pnum'] = this.page.pnum; this.$ajax(&#123; url:'goods/list', data:data &#125;).then(val =&gt; &#123; this.tableData = val.data.rows ? val.data.rows : []; this.page = &#123; pnum:10, pageTotal:val.data.total, currentPage:val.data.page, &#125;; setTimeout(()=&gt;&#123; this.setSelectRow(); &#125;, 50) &#125;) &#125; &#125;, created () &#123; this.getGoodsList() &#125;&#125;","categories":[],"tags":[]},{"title":"重复点击","slug":"reClick","date":"2019-03-01T10:51:11.000Z","updated":"2019-12-30T11:38:18.356Z","comments":true,"path":"2019/03/01/reClick/","link":"","permalink":"http://yoursite.com/2019/03/01/reClick/","excerpt":"","text":"防止重复点击,或者点击过快方法. 1.html123&lt;button type=\"button\" data-num=\"0\"&gt;00000&lt;/button&gt;&lt;button type=\"button\" data-num=\"1\"&gt;11111&lt;/button&gt;&lt;button type=\"button\" data-num=\"2\"&gt;22222&lt;/button&gt; 2.js1234567891011121314&lt;script&gt;var isClick = true;$(\"button\").on(\"click\",function()&#123; if(isClick) &#123; isClick = false; //事件 console.log($(this).attr(\"data-num\")); //定时器 setTimeout(function() &#123; isClick = true; &#125;, 1000);//一秒内不能重复点击 &#125;&#125;);&lt;/script&gt; 实际需求代码","categories":[],"tags":[]},{"title":"验证码功能","slug":"articletest","date":"2018-11-09T11:38:20.000Z","updated":"2019-12-30T11:24:05.100Z","comments":true,"path":"2018/11/09/articletest/","link":"","permalink":"http://yoursite.com/2018/11/09/articletest/","excerpt":"","text":"登陆验证样式。 数字验证码效果 代码示例HTML123&lt;input type=\"text\" name=\"phone\" id=\"phone\" value=\"\" placeholder=\"请输入手机号\" maxlength=\"11\" /&gt;&lt;input type=\"\" name=\"verCode\" id=\"verCode\" value=\"\" placeholder=\"请输入验证码\" maxlength=\"6\"/&gt;&lt;input type=\"button\" name=\"\" id=\"verCodeBtn\" value=\"获取验证码\" onclick=\"settime(this);\"/&gt; JS123456789101112131415161718//验证码var counts = 60;function setTime(val) &#123; if(counts == 0) &#123; val.removeAttribute(\"disabled\"); val.value = \"获取验证码\"; counts = 60; return false; &#125; else &#123; val.setAttribute(\"disabled\", true); val.value = \"重新发送（\" + counts + \"）\"; counts--; &#125; setTimeout(function() &#123; setTime(val); &#125;, 1000);&#125; 请求接口123456789101112131415161718192021$(function()&#123; //获取验证码 $(\"#verCodeBtn\").click(function() &#123; $.ajax(&#123; url: \"\", data: &#123;&#125;, type: \"post\", success: function(data) &#123; if(JSON.parse(data).state === 404 || JSON.parse(data).state === 202) &#123; alert(\"验证码发送失败\") &#125; else &#123; alert(\"验证码发送成功，请耐心等待\") &#125; &#125;, error: function() &#123; alert(\"发送失败\"); &#125; &#125;); &#125;);&#125;) 图形验证码效果 代码示例HTML12345&lt;div class=\"code\"&gt; &lt;input type=\"text\" value=\"\" placeholder=\"请输入验证码（不区分大小写）\" class=\"input-val\"&gt; &lt;canvas id=\"canvas\" width=\"100\" height=\"30\"&gt;&lt;/canvas&gt; &lt;button class=\"btn\"&gt;提交&lt;/button&gt;&lt;/div&gt; CSS12345678910111213141516171819202122232425&lt;style&gt; .input-val &#123; width: 200px; height: 32px; border: 1px solid #ddd; box-sizing: border-box; &#125; #canvas &#123; vertical-align: middle; box-sizing: border-box; border: 1px solid #ddd; cursor: pointer; &#125; .btn &#123; display: block; margin-top: 20px; height: 32px; width: 100px; font-size: 16px; color: #fff; background-color: #457adb; border: none; border-radius: 50px; &#125;&lt;/style&gt; JS12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;script type=\"text/javascript\" src=\"js/jquery-3.3.1.min.js\" &gt;&lt;/script&gt;&lt;script&gt; $(function()&#123; var show_num = []; draw(show_num); $(\"#canvas\").on('click',function()&#123; draw(show_num); &#125;) $(\".btn\").on('click',function()&#123; var val = $(\".input-val\").val().toLowerCase(); var num = show_num.join(\"\"); if(val=='')&#123; alert('请输入验证码！'); &#125;else if(val == num)&#123; alert('提交成功！'); $(\".input-val\").val(''); // draw(show_num); &#125;else&#123; alert('验证码错误！请重新输入！'); $(\".input-val\").val(''); // draw(show_num); &#125; &#125;) &#125;) //生成并渲染出验证码图形 function draw(show_num) &#123; var canvas_width=$('#canvas').width(); var canvas_height=$('#canvas').height(); var canvas = document.getElementById(\"canvas\");//获取到canvas的对象，演员 var context = canvas.getContext(\"2d\");//获取到canvas画图的环境，演员表演的舞台 canvas.width = canvas_width; canvas.height = canvas_height; var sCode = \"a,b,c,d,e,f,g,h,i,j,k,m,n,p,q,r,s,t,u,v,w,x,y,z,A,B,C,E,F,G,H,J,K,L,M,N,P,Q,R,S,T,W,X,Y,Z,1,2,3,4,5,6,7,8,9,0\"; var aCode = sCode.split(\",\"); var aLength = aCode.length;//获取到数组的长度 for (var i = 0; i &lt; 4; i++) &#123; //这里的for循环可以控制验证码位数（如果想显示6位数，4改成6即可） var j = Math.floor(Math.random() * aLength);//获取到随机的索引值 // var deg = Math.random() * 30 * Math.PI / 180;//产生0~30之间的随机弧度 var deg = Math.random() - 0.5; //产生一个随机弧度 var txt = aCode[j];//得到随机的一个内容 show_num[i] = txt.toLowerCase(); var x = 10 + i * 20;//文字在canvas上的x坐标 var y = 20 + Math.random() * 8;//文字在canvas上的y坐标 context.font = \"bold 23px 微软雅黑\"; context.translate(x, y); context.rotate(deg); context.fillStyle = randomColor(); context.fillText(txt, 0, 0); context.rotate(-deg); context.translate(-x, -y); &#125; for (var i = 0; i &lt;= 5; i++) &#123; //验证码上显示线条 context.strokeStyle = randomColor(); context.beginPath(); context.moveTo(Math.random() * canvas_width, Math.random() * canvas_height); context.lineTo(Math.random() * canvas_width, Math.random() * canvas_height); context.stroke(); &#125; for (var i = 0; i &lt;= 30; i++) &#123; //验证码上显示小点 context.strokeStyle = randomColor(); context.beginPath(); var x = Math.random() * canvas_width; var y = Math.random() * canvas_height; context.moveTo(x, y); context.lineTo(x + 1, y + 1); context.stroke(); &#125; &#125; //得到随机的颜色值 function randomColor() &#123; var r = Math.floor(Math.random() * 256); var g = Math.floor(Math.random() * 256); var b = Math.floor(Math.random() * 256); return \"rgb(\" + r + \",\" + g + \",\" + b + \")\"; &#125;&lt;/script&gt; 滑动验证码效果 代码示例HTML12345&lt;div class=\"drag\"&gt; &lt;div class=\"bg\"&gt;&lt;/div&gt; &lt;div class=\"text\" onselectstart=\"return false;\"&gt;请拖动滑块解锁&lt;/div&gt; &lt;div class=\"btn\"&gt;&amp;gt;&amp;gt;&lt;/div&gt;&lt;/div&gt; CSS1234567891011121314151617181920212223242526272829303132333435&lt;style&gt; .drag&#123; width: 300px; height: 40px; line-height: 40px; background-color: #e8e8e8; position: relative; margin:0 auto; &#125; .bg&#123; width:40px; height: 100%; position: absolute; background-color: #75CDF9; &#125; .text&#123; position: absolute; width: 100%; height: 100%; text-align: center; user-select: none; &#125; .btn&#123; width:40px; height: 38px; position: absolute; border:1px solid #ccc; cursor: move; font-family: \"宋体\"; text-align: center; background-color: #fff; user-select: none; color:#666; &#125;&lt;/style&gt; JS123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990&lt;script&gt; //一、定义一个获取DOM元素的方法 var $ = function(selector)&#123; return document.querySelector(selector); &#125;, box = $(\".drag\"),//容器 bg = $(\".bg\"),//背景 text = $(\".text\"),//文字 btn = $(\".btn\"),//滑块 success = false,//是否通过验证的标志 distance = box.offsetWidth - btn.offsetWidth;//滑动成功的宽度（距离） //二、给滑块注册鼠标按下事件 btn.onmousedown = function(e)&#123; //1.鼠标按下之前必须清除掉后面设置的过渡属性 btn.style.transition = \"\"; bg.style.transition =\"\"; //说明：clientX 事件属性会返回当事件被触发时，鼠标指针向对于浏览器页面(或客户区)的水平坐标。 //2.当滑块位于初始位置时，得到鼠标按下时的水平位置 var e = e || window.event; var downX = e.clientX; //三、给文档注册鼠标移动事件 document.onmousemove = function(e)&#123; var e = e || window.event; //1.获取鼠标移动后的水平位置 var moveX = e.clientX; //2.得到鼠标水平位置的偏移量（鼠标移动时的位置 - 鼠标按下时的位置） var offsetX = moveX - downX; //3.在这里判断一下：鼠标水平移动的距离 与 滑动成功的距离 之间的关系 if( offsetX &gt; distance)&#123; offsetX = distance;//如果滑过了终点，就将它停留在终点位置 &#125;else if( offsetX &lt; 0)&#123; offsetX = 0;//如果滑到了起点的左侧，就将它重置为起点位置 &#125; //4.根据鼠标移动的距离来动态设置滑块的偏移量和背景颜色的宽度 btn.style.left = offsetX + \"px\"; bg.style.width = offsetX + \"px\"; //如果鼠标的水平移动距离 = 滑动成功的宽度 if( offsetX == distance)&#123; //1.设置滑动成功后的样式 text.innerHTML = \"验证通过\"; text.style.color = \"#fff\"; btn.innerHTML = \"&amp;radic;\"; btn.style.color = \"green\"; bg.style.backgroundColor = \"lightgreen\"; //2.设置滑动成功后的状态 success = true; //成功后，清除掉鼠标按下事件和移动事件（因为移动时并不会涉及到鼠标松开事件） btn.onmousedown = null; document.onmousemove = null; //3.成功解锁后的回调函数 setTimeout(function()&#123; alert('解锁成功！'); &#125;,100); &#125; &#125; //四、给文档注册鼠标松开事件 document.onmouseup = function(e)&#123; //如果鼠标松开时，滑到了终点，则验证通过 if(success)&#123; return; &#125;else&#123; //反之，则将滑块复位（设置了1s的属性过渡效果） btn.style.left = 0; bg.style.width = 0; btn.style.transition = \"left 1s ease\"; bg.style.transition = \"width 1s ease\"; &#125; //只要鼠标松开了，说明此时不需要拖动滑块了，那么就清除鼠标移动和松开事件。 document.onmousemove = null; document.onmouseup = null; &#125; &#125;&lt;/script&gt; More info: Baidu","categories":[],"tags":[]},{"title":"Date日期相关","slug":"Date","date":"2018-08-30T10:39:18.000Z","updated":"2019-12-30T11:38:00.461Z","comments":true,"path":"2018/08/30/Date/","link":"","permalink":"http://yoursite.com/2018/08/30/Date/","excerpt":"","text":"获取当前时间日期及大小比较。 获取当前时间，格式YYYY-MM-DD123456789101112131415function getNowFormatDate() &#123; var date = new Date(); var seperator1 = \"-\"; var year = date.getFullYear(); var month = date.getMonth() + 1; var strDate = date.getDate(); if (month &gt;= 1 &amp;&amp; month &lt;= 9) &#123; month = \"0\" + month; &#125; if (strDate &gt;= 0 &amp;&amp; strDate &lt;= 9) &#123; strDate = \"0\" + strDate; &#125; var currentdate = year + seperator1 + month + seperator1 + strDate; return currentdate;&#125; 比较日期大小123456789function compareDate(date1, date2) &#123; var date1 = new Date(date1); var date2 = new Date(date2); if (date1.getTime() &gt; date2.getTime()) &#123; return true; &#125; else &#123; return false; &#125;&#125;","categories":[],"tags":[]},{"title":"ES6相关","slug":"ES6","date":"2018-07-09T12:15:53.000Z","updated":"2019-12-30T11:37:47.076Z","comments":true,"path":"2018/07/09/ES6/","link":"","permalink":"http://yoursite.com/2018/07/09/ES6/","excerpt":"","text":"ES6 的部分新特性和功能,留作回顾。 1.const 与 let使用var带来的麻烦:12345678function getClothing(isCold) &#123; if (isCold) &#123; var freezing = 'Grab a jacket!'; &#125; else &#123; var hot = 'It's a shorts kind of day.'; console.log(freezing); &#125;&#125; 运行getClothing(false)后输出的是undefined,这是因为执行function函数之前,所有变量都会被提升, 提升到函数作用域顶部. let与const声明的变量解决了这种问题,因为他们是块级作用域, 在代码块(用{}表示)中使用let或const声明变量, 该变量会陷入暂时性死区直到该变量的声明被处理. 12345678function getClothing(isCold) &#123; if (isCold) &#123; const freezing = 'Grab a jacket!'; &#125; else &#123; const hot = 'It's a shorts kind of day.'; console.log(freezing); &#125;&#125; 运行getClothing(false)后输出的是ReferenceError: freezing is not defined,因为 freezing 没有在 else 语句、函数作用域或全局作用域内声明，所以抛出 ReferenceError。 模板字面量在ES6之前,将字符串连接到一起的方法是+或者concat()方法,如1234567891011const student = &#123; name: 'Richard Kalehoff', guardian: 'Mr. Kalehoff'&#125;;const teacher = &#123; name: 'Mrs. Wilson', room: 'N231'&#125;let message = student.name + ' please see ' + teacher.name + ' in ' + teacher.room + ' to pick up your report card.'; 模板字面量本质上是包含嵌入式表达式的字符串字面量.模板字面量用倒引号 ( `` )（而不是单引号 ( ‘’ ) 或双引号( “” )）表示，可以包含用 ${expression} 表示的占位符 1let message = `$&#123;student.name&#125; please see $&#123;teacher.name&#125; in $&#123;teacher.room&#125; to pick up your report card.`; 解构在ES6中,可以使用解构从数组和对象提取值并赋值给独特的变量解构数组的值: 123const point = [10, 25, -34];const [x, y, z] = point;console.log(x, y, z); 1Prints: 10 25 -34 []表示被解构的数组, x,y,z表示要将数组中的值存储在其中的变量, 在解构数组是, 还可以忽略值, 例如const[x,,z]=point,忽略y坐标. 解构对象中的值: 1234567const gemstone = &#123; type: 'quartz', color: 'rose', karat: 21.29&#125;;const &#123;type, color, karat&#125; = gemstone;console.log(type, color, karat); 花括号 { } 表示被解构的对象，type、color 和 karat 表示要将对象中的属性存储到其中的变量","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-04-05T12:04:02.000Z","updated":"2019-12-30T11:18:53.161Z","comments":true,"path":"2018/04/05/hello-world/","link":"","permalink":"http://yoursite.com/2018/04/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}